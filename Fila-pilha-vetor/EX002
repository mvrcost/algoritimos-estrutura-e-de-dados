class Node:
    def __init__(self, name, payment):
        self.name = name
        self.payment = payment
        self.next = None


class Queue:
    def __init__(self):
        self.head = None
        self.tail = None

    def enqueue(self, name, payment):
        new_node = Node(name, payment)
        if self.head is None:
            self.head = new_node
        else:
            self.tail.next = new_node
        self.tail = new_node

    def dequeue(self):
        if self.head is None:
            return None
        name = self.head.name
        payment = self.head.payment
        self.head = self.head.next
        if self.head is None:
            self.tail = None
        return name, payment


class CashRegisterSystem:
    def __init__(self):
        self.queue1 = Queue()
        self.queue2 = Queue()
        self.total1 = 0.0
        self.total2 = 0.0

    def process_command(self, command):
        if command.startswith("ENTROU"):
            _, name, queue_num, payment = command.split()
            queue_num = int(queue_num)
            payment = float(payment)
            if queue_num == 1:
                self.queue1.enqueue(name, payment)
                print(f"{name} entrou na fila {queue_num}")
            elif queue_num == 2:
                self.queue2.enqueue(name, payment)
                print(f"{name} entrou na fila {queue_num}")
            else:
                print("Número inválido de caixa")
        elif command.startswith("PROXIMO"):
            _, queue_num = command.split()
            queue_num = int(queue_num)
            if queue_num == 1:
                result = self.queue1.dequeue()
                if result:
                    name, payment = result
                    self.total1 += payment
                    print(f"{name} foi chamado para o caixa {queue_num}")
                else:
                    print(f"Fila vazia no caixa {queue_num}")
            elif queue_num == 2:
                result = self.queue2.dequeue()
                if result:
                    name, payment = result
                    self.total2 += payment
                    print(f"{name} foi chamado para o caixa {queue_num}")
                else:
                    print(f"Fila vazia no caixa {queue_num}")
            else:
                print("Número inválido de caixa")
        elif command == "FIM":
            print(f"Caixa 1: R$ {self.total1:.2f}, Caixa 2: R$ {self.total2:.2f}")
        else:
            print("Comando inválido")


def main():
    system = CashRegisterSystem()

    while True:
        command = input().strip()
        system.process_command(command)
        if command == "FIM":
            break


if __name__ == "__main__":
    main()
